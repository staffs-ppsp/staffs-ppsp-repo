package kchcinemas;

import java.io.IOException;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.util.Random;

public class PortManager {
    private static final int[] intUsedPortRangeStarts = {   0,1024,1029,1058,1080,1085,1098,1109,1140,1167,1169,1176,1182,1194,1198,1200,1214,1217,1220,1223,1234,1236,1241,1270,1293,1301,1309,1311,1313,1319,1337,1352,1387,1414,1417,1431,1433,1470,1494,1500,1503,1512,1521,1524,1526,1533,1547,1550,1581,1589,1627,1645,1666,1677,1701,1707,1716,1719,1723,1725,1755,1761,1801,1812,1863,1883,1886,1900,1920,1935,1947,1967,1970,1975,1984,1994,1997,2000,2030,2041,2049,2053,2056,2073,2082,2086,2095,2102,2144,2156,2161,2181,2190,2200,2210,2219,2261,2301,2305,2369,2381,2401,2404,2420,2427,2447,2483,2500,2525,2546,2593,2598,2610,2612,2638,2700,2809,2868,2944,2947,2967,3000,3017,3025,3030,3050,3074,3100,3128,3225,3233,3235,3260,3268,3283,3299,3305,3313,3333,3386,3389,3396,3412,3423,3455,3478,3483,3516,3527,3532,3537,3544,3605,3632,3689,3702,3723,3784,3800,3868,3872,3880,3899,3945,3978,3999,4007,4018,4069,4089,4093,4096,4100,4111,4116,4125,4201,4224,4226,4321,4323,4433,4500,4534,4567,4569,4610,4662,4664,4672,4711,4728,4747,4750,4840,4843,4847,4894,4899,4949,4982,4993,5000,5029,5031,5050,5060,5070,5082,5093,5099,5104,5106,5121,5150,5154,5176,5190,5222,5246,5269,5298,5310,5351,5353,5355,5357,5402,5405,5421,5432,5445,5450,5495,5498,5517,5550,5555,5591,5631,5656,5666,5678,5721,5723,5800,5814,5850,5852,5900,5912,5938,5984,5999,6005,6050,6072,6086,6100,6110,6129,6257,6260,6262,6343,6346,6350,6389,6432,6444,6502,6522,6543,6566,6571,6600,6619,6646,6660,6679,6697,6699,6771,6789,6881,7005,7010,7025,7047,7133,7144,7171,7306,7312,7400,7547,7670,7676,7777,7831,7880,7915,7935,7937,9987,9996, 9999,10008,10010,10017,10024,10050,10113,10200,10308,10480,11211,11235,11294,11371,11576,12010,12035,12222,12345,12489,12975,12998,13076,13720,13724,13782,13785,14439,14567,15000,15345,15567,16000,16080,16384,16567,17500,18010,18104,18180,18200,18206,18300,18306,18400,18505,18605,19000,19226,19283,19294,19302,19315,19638,19771,19812,19880,19999,20014,20720,21001,21011,21021,22136,22347,22350,23073,23399,23513,24444,24465,24554,24800,24842,25560,25565,25888,25999,26900,27000,27014,27017,27374,27500,27888,27900,27960,28000,28395,28910,28960,29000,29900,29920,30000,30301,30564,30718,30777,31337,31415,31456,32123,32245,32769,32976,33434,34443,36963,37659,37777,40000,43047,43594,47808,49151,49152};
    private static final int[] intUsedPortRangeEnds   = {1023,1026,1029,1059,1080,1085,1099,1110,1140,1167,1169,1176,1182,1194,1198,1200,1214,1217,1220,1223,1234,1236,1241,1270,1293,1301,1309,1311,1313,1319,1337,1352,1387,1414,1420,1431,1434,1470,1494,1501,1503,1513,1521,1524,1526,1533,1547,1550,1581,1589,1627,1646,1666,1677,1701,1707,1716,1720,1723,1725,1755,1763,1801,1813,1863,1883,1886,1900,1920,1935,1947,1967,1972,1976,1985,1994,1998,2002,2031,2041,2049,2053,2056,2074,2083,2087,2096,2105,2145,2156,2161,2181,2190,2200,2212,2223,2262,2303,2305,2370,2381,2401,2404,2420,2427,2447,2484,2501,2525,2546,2593,2599,2610,2612,2638,2800,2809,2868,2945,2949,2967,3008,3017,3025,3030,3051,3074,3101,3128,3225,3233,3235,3260,3269,3283,3300,3306,3313,3333,3386,3389,3396,3412,3424,3455,3478,3483,3516,3527,3533,3537,3544,3606,3632,3690,3702,3724,3785,3800,3868,3872,3880,3900,3945,3979,4001,4007,4018,4069,4089,4093,4096,4100,4111,4116,4125,4201,4224,4226,4321,4323,4436,4500,4534,4567,4569,4640,4662,4664,4672,4712,4728,4747,4750,4840,4843,4847,4894,4899,4950,4982,4993,5005,5029,5031,5051,5061,5070,5085,5093,5099,5104,5110,5121,5151,5154,5176,5190,5223,5247,5269,5298,5315,5351,5353,5355,5358,5402,5405,5421,5433,5445,5450,5495,5501,5517,5550,5556,5591,5632,5656,5667,5678,5721,5723,5800,5814,5850,5852,5900,5912,5938,5984,6001,6005,6051,6072,6086,6101,6113,6129,6257,6260,6262,6343,6347,6350,6389,6432,6445,6503,6523,6543,6566,6571,6600,6619,6646,6669,6679,6697,6699,6771,6789,7002,7006,7010,7025,7047,7133,7145,7171,7307,7312,7402,7547,7670,7676,7788,7831,7880,7915,7935,9936,9987,9996,10001,10008,10010,10017,10025,10051,10116,10204,10308,10480,11211,11235,11294,11371,11576,12013,12035,12223,12345,12489,12975,13050,13076,13721,13724,13783,13786,14439,14567,15000,15345,15567,16000,16080,16384,16567,17500,18010,18104,18180,18201,18206,18301,18306,18401,18506,18606,19001,19226,19283,19295,19302,19315,19638,19771,19814,19880,20000,20014,20720,21001,21012,21022,22136,22347,22350,23073,23399,23513,24444,24465,24554,24800,24842,25560,25565,25888,26000,26901,27010,27015,27017,27374,27500,27888,27901,27960,28001,28395,28910,28960,29000,29901,29920,30000,30301,30564,30718,30777,31337,31415,31458,32123,32245,32769,32976,33434,34443,36963,37659,37777,40000,43048,43595,47808,49151,65536};

	private static final Random objRandom = new Random();

	static {
		if (intUsedPortRangeEnds.length != intUsedPortRangeStarts.length) {
			throw new IllegalStateException("PortManager: s!=e");
		}
	}

	public static class PortUnavailableException extends IllegalArgumentException {
		private PortUnavailableException(int intPort) {
			this(intPort,null);
		}

		private PortUnavailableException(int intPort, Throwable objThrowable) {
			super("Port " + intPort + " is unavailable and a substitue was not allowed",objThrowable);
		}
	}

	private static boolean isPortLegal(int intPort) {
		return !(intPort < intUsedPortRangeStarts[0] || intPort > intUsedPortRangeEnds[intUsedPortRangeEnds.length-1]);
	}

	private static boolean isPortKnown(int intPort) {
		if (!isPortLegal(intPort)) {
			return true;
		}
		else {
			for (int intEntry=0; intEntry<intUsedPortRangeStarts.length; intEntry++) {
				if (intPort >= intUsedPortRangeStarts[intEntry] && intPort <= intUsedPortRangeEnds[intEntry]) {
					return true;
				}
			}
			return false;
		}
	}

	private static boolean isPortUsed(int intPort) {
		if (!isPortLegal(intPort)) {
			return true;
		}
		else {
			ServerSocket objSS = null;
			DatagramSocket objDS = null;
			try {
				objSS = new ServerSocket(intPort);
				objSS.setReuseAddress(true);
				objDS = new DatagramSocket(intPort);
				objDS.setReuseAddress(true);
				return false;
			}
			catch (IOException objException) {}
			finally {
				if (objDS != null) {
					objDS.close();
				}

				if (objSS != null) {
					try {
						objSS.close();
					}
					catch (IOException objException) {
						// Should never happen
					}
				}
			}
			return true;
		}
	}

	private static int getUnknownPort() {
		int intPort = -1;
		while (isPortKnown(intPort)) {
			intPort = objRandom.nextInt(65536);
		}
		return intPort;
	}

	public static int getAvailablePort(int intPort) {
		return getAvailablePort(intPort,false);
	}

	public static int getAvailablePort(int intPort, boolean boolForcePort) {
		if (boolForcePort) {
			if (isPortUsed(intPort)) {
				throw new PortUnavailableException(intPort);
			}
		}
		else {
			if (isPortKnown(intPort)) {
				intPort = getUnknownPort();
			}

			while (isPortUsed(intPort)) {
				intPort = getUnknownPort();
			}
		}
		return intPort;
	}
}